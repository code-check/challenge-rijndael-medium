import org.scalatest._

class RijndaelTest extends FlatSpec with BeforeAndAfter with Matchers {
  private final val cipher = new Rijndael()
  private final val bEnc = Array(0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34).map(_.toByte)
  private final val bCase1 = Array(0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32).map(_.toByte)
  private final val bCase2 = Array(0xf9, 0xfb, 0x29, 0xae, 0xfc, 0x38, 0x4a, 0x25, 0x03, 0x40, 0xd8, 0x33, 0xb8, 0x7e, 0xbc, 0x00).map(_.toByte)
  private final val bCase3 = Array(0x1a, 0x6e, 0x6c, 0x2c, 0x66, 0x2e, 0x7d, 0xa6, 0x50, 0x1f, 0xfb, 0x62, 0xbc, 0x9e, 0x93, 0xf3).map(_.toByte)
  private final val bKey1 = Array(0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c).map(_.toByte)
  private final val bKey2 = Array(0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c, 0x76, 0x2e, 0x71, 0x60, 0xf3, 0x8b, 0x4d, 0xa5).map(_.toByte)
  private final val bKey3 = Array(0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c, 0x76, 0x2e, 0x71, 0x60, 0xf3, 0x8b, 0x4d, 0xa5, 0x6a, 0x78, 0x4d, 0x90, 0x45, 0x19, 0x0c, 0xfe).map(_.toByte)

  "cipher" should "be an instance of IRijndael" in {
    cipher.isInstanceOf[IRijndael] shouldEqual true
  }

  "EncryptCase 1" should "validate" in {
    cipher.encrypt(bEnc, bKey1) shouldEqual bCase1
  }

  "EncryptCase 2" should "validate" in {
    cipher.encrypt(bEnc, bKey2) shouldEqual bCase2
  }

  "EncryptCase 3" should "validate" in {
    cipher.encrypt(bEnc, bKey3) shouldEqual bCase3
  }

  "DecryptCase 1" should "validate" in {
    cipher.decrypt(bCase1, bKey1) shouldEqual bEnc
  }

  "DecryptCase 2" should "validate" in {
    cipher.decrypt(bCase2, bKey2) shouldEqual bEnc
  }

  "DecryptCase 3" should "validate" in {
    cipher.decrypt(bCase3, bKey3) shouldEqual bEnc
  }
}
